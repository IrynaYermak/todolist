{"version":3,"file":"index.js","sources":["../src/js/local-storage-api.js","../src/js/refs.js","../src/js/tasks.js","../src/main.js"],"sourcesContent":["export const saveInLs = (key, value) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\nexport const getFromLs = key => {\n  const savedData = localStorage.getItem(key);\n  if (savedData) {\n    const parsedData = JSON.parse(savedData);\n    return parsedData;\n  }\n  return null;\n};\n","export const form = document.querySelector('#task-form');\nexport const list = document.getElementById('task-list');\n","import { getFromLs } from './local-storage-api';\n\nexport const TASKS = getFromLs('tasks') || [];\n","/*\n  Створи список справ.\n  На сторінці є два інпути які має вводиться назва і текст задачі.\n  Після натискання на кнопку \"Add\" завдання додається до списку #task-list.\n\n  У кожної картки має бути кнопка \"Delete\", щоб можна було\n  прибрати завдання зі списку.\n  Список із завданнями має бути доступним після перезавантаження сторінки.\n\n  Розмітка картки задачі\n  <li class=\"task-list-item\">\n      <button class=\"task-list-item-btn\">Delete</button>\n      <h3>Заголовок</h3>\n      <p>Текст</p>\n  </li>\n*/\n\n// 1. З форми забрати обʼєкт {title, description}\n// 2. Додати обʼєкт до масива тасок\n// 3. Зарендерити таски\n// 4. Зберігти в локалсторадж масив тасок\n\nimport { saveInLs } from './js/local-storage-api';\nimport { getFromLs } from './js/local-storage-api';\n\nimport { form, list } from './js/refs';\n\nimport { TASKS } from './js/tasks';\n\nrenderMarkup(TASKS);\n\nform.addEventListener('submit', addTask);\nlist.addEventListener('click', deleteTask);\n\nfunction addTask(event) {\n  event.preventDefault();\n  const formEv = event.target;\n  const title = formEv.elements.taskName.value.trim();\n  const description = formEv.elements.taskDescription.value.trim();\n  if (title === '' || description === '') {\n    alert('Fill all fields');\n    return;\n  }\n  const newTask = { title, description };\n\n  TASKS.push(newTask);\n  saveInLs('tasks', TASKS);\n  renderMarkup(TASKS);\n}\n\nfunction createMarkup(arr) {\n  return arr\n    .map(\n      element => `<li class=\"task-list-item\">\n      <button class=\"task-list-item-btn\">Delete</button>\n      <h3>${element.title}</h3>\n      <p>${element.description}</p>\n  </li>`\n    )\n    .join('');\n}\n\nfunction renderMarkup(arr) {\n  list.innerHTML = createMarkup(arr);\n}\n\nfunction deleteTask(event) {\n  if (event.target.nodeName !== 'BUTTON') {\n    return;\n  }\n  const titleForDelete = event.target.nextElementSibling.textContent;\n  const filteredTasks = TASKS.filter(task => task.title !== titleForDelete);\n  saveInLs('tasks', filteredTasks);\n  renderMarkup(filteredTasks);\n}\n"],"names":["saveInLs","key","value","getFromLs","savedData","form","list","TASKS","renderMarkup","addTask","deleteTask","event","formEv","title","description","newTask","createMarkup","arr","element","titleForDelete","filteredTasks","task"],"mappings":"ssBAAO,MAAMA,EAAW,CAACC,EAAKC,IAAU,CACtC,aAAa,QAAQD,EAAK,KAAK,UAAUC,CAAK,CAAC,CACjD,EAEaC,EAAYF,GAAO,CAC9B,MAAMG,EAAY,aAAa,QAAQH,CAAG,EAC1C,OAAIG,EACiB,KAAK,MAAMA,CAAS,EAGlC,IACT,ECXaC,EAAO,SAAS,cAAc,YAAY,EAC1CC,EAAO,SAAS,eAAe,WAAW,ECC1CC,EAAQJ,EAAU,OAAO,GAAK,CAAE,EC2B7CK,EAAaD,CAAK,EAElBF,EAAK,iBAAiB,SAAUI,CAAO,EACvCH,EAAK,iBAAiB,QAASI,CAAU,EAEzC,SAASD,EAAQE,EAAO,CACtBA,EAAM,eAAc,EACpB,MAAMC,EAASD,EAAM,OACfE,EAAQD,EAAO,SAAS,SAAS,MAAM,OACvCE,EAAcF,EAAO,SAAS,gBAAgB,MAAM,OAC1D,GAAIC,IAAU,IAAMC,IAAgB,GAAI,CACtC,MAAM,iBAAiB,EACvB,MACD,CACD,MAAMC,EAAU,CAAE,MAAAF,EAAO,YAAAC,GAEzBP,EAAM,KAAKQ,CAAO,EAClBf,EAAS,QAASO,CAAK,EACvBC,EAAaD,CAAK,CACpB,CAEA,SAASS,EAAaC,EAAK,CACzB,OAAOA,EACJ,IACCC,GAAW;AAAA;AAAA,YAELA,EAAQ,KAAK;AAAA,WACdA,EAAQ,WAAW;AAAA,QAEzB,EACA,KAAK,EAAE,CACZ,CAEA,SAASV,EAAaS,EAAK,CACzBX,EAAK,UAAYU,EAAaC,CAAG,CACnC,CAEA,SAASP,EAAWC,EAAO,CACzB,GAAIA,EAAM,OAAO,WAAa,SAC5B,OAEF,MAAMQ,EAAiBR,EAAM,OAAO,mBAAmB,YACjDS,EAAgBb,EAAM,OAAOc,GAAQA,EAAK,QAAUF,CAAc,EACxEnB,EAAS,QAASoB,CAAa,EAC/BZ,EAAaY,CAAa,CAC5B"}